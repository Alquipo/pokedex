directive @cacheControl(maxAge: Int, scope: CacheControlScope) on FIELD_DEFINITION | OBJECT | INTERFACE

"""Exposes a URL that specifies the behaviour of this scalar."""
directive @specifiedBy(
  """The URL that specifies the behaviour of this scalar."""
  url: String!
) on SCALAR

"""
Direct the client to resolve this field locally, either from the cache or local resolvers.
"""
directive @client(
  """
  When true, the client will never use the cache for this value. See
  https://www.apollographql.com/docs/react/essentials/local-state/#forcing-resolvers-with-clientalways-true
  """
  always: Boolean
) on FIELD | FRAGMENT_DEFINITION | INLINE_FRAGMENT

"""
Export this locally resolved field as a variable to be used in the remainder of this query. See
https://www.apollographql.com/docs/react/essentials/local-state/#using-client-fields-as-variables
"""
directive @export(
  """The variable name to export this field as."""
  as: String!
) on FIELD

"""
Specify a custom store key for this result. See
https://www.apollographql.com/docs/react/advanced/caching/#the-connection-directive
"""
directive @connection(
  """Specify the store key."""
  key: String!

  """
  An array of query argument names to include in the generated custom store key.
  """
  filter: [String!]
) on FIELD

type Ability {
  ability: BaseName
  is_hidden: Boolean
  slot: Int
}

type BaseList {
  count: Int
  next: String
  previous: String
  results: [BaseName]
  status: Boolean
  message: String
}

type BaseName {
  url: String
  name: String
}

type BaseResponse {
  message: String
  status: Boolean
  response: JSON
  params: JSON
}

enum CacheControlScope {
  PUBLIC
  PRIVATE
}

type GameIndex {
  game_index: Int
  version: BaseName
}

type HeldItem {
  item: BaseName
  version_details: [VersionDetail]
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject

type Move {
  move: BaseName
  version_group_details: [VersionGroupDetail]
}

type Pokemon {
  abilities: [Ability]
  base_experience: Int
  forms: [BaseName]
  game_indices: [GameIndex]
  height: Int
  held_items: [HeldItem]
  id: Int
  is_default: Boolean
  location_area_encounters: String
  moves: [Move]
  name: String
  order: Int
  species: BaseName
  sprites: Sprite
  stats: [Stat]
  types: [Type]
  weight: Int
  status: Boolean
  message: String
}

type PokemonItem {
  url: String
  name: String
  image: String
  id: Int
}

type PokemonList {
  count: Int
  next: String
  previous: String
  nextOffset: Int
  prevOffset: Int
  params: JSON
  results: [PokemonItem]
  status: Boolean
  message: String
}

type Query {
  abilities: BaseList
  ability(ability: String!): BaseResponse
  berries: BaseList
  berry(berry: String!): BaseResponse
  eggGroups: BaseList
  eggGroup(eggGroup: String!): BaseResponse
  encounterMethods: BaseList
  encounterMethod(encounterMethod: String!): BaseResponse
  evolutionChains: BaseList
  evolutionChain(id: String!): BaseResponse
  evolutionTriggers: BaseList
  evolutionTrigger(name: String!): BaseResponse
  genders: BaseList
  gender(gender: String!): BaseResponse
  growthRates: BaseList
  growthRate(growthRate: String!): BaseResponse
  locations: BaseList
  location(location: String!): BaseResponse
  moves: BaseList
  move(move: String!): BaseResponse
  natures: BaseList
  nature(nature: String!): BaseResponse
  pokemons(limit: Int, offset: Int): PokemonList
  pokemon(name: String!): Pokemon
  regions: BaseList
  region(region: String!): BaseResponse
  species: BaseList
  types: BaseList
}

type Sprite {
  back_default: String
  back_female: String
  back_shiny: String
  back_shiny_female: String
  front_default: String
  front_female: String
  front_shiny: String
  front_shiny_female: String
}

type Stat {
  base_stat: Int
  effort: Int
  stat: BaseName
}

type Type {
  slot: Int
  type: BaseName
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type VersionDetail {
  rarity: Int
  version: BaseName
}

type VersionGroupDetail {
  level_learned_at: Int
  move_learn_method: BaseName
  version_group: BaseName
}
